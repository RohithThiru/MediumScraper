{"ast":null,"code":"const express = require('express');\nconst puppeteer = require('puppeteer');\nconst cors = require('cors');\nconst app = express();\nconst PORT = process.env.PORT || 3000;\napp.use(cors()); // Enable CORS for all routes\n\nasync function searchMedium(query) {\n  let browser;\n  try {\n    browser = await puppeteer.launch({\n      headless: true\n    });\n    const page = await browser.newPage();\n    await page.setDefaultTimeout(90000); // Increase timeout to 90 seconds\n    await page.goto(`https://medium.com/search?q=${encodeURIComponent(query)}`, {\n      waitUntil: 'networkidle2'\n    });\n    console.log('Page content loaded');\n    await page.waitForSelector('article', {\n      timeout: 90000\n    });\n    const results = await page.evaluate(() => {\n      const articles = Array.from(document.querySelectorAll('article'));\n      return articles.slice(0, 5).map(article => {\n        const titleElement = article.querySelector('h2');\n        const urlElement = article.querySelector('a');\n        const blogUrlElement = article.querySelector('a[href*=\"medium.com\"]');\n        const dateElement = article.querySelector('span.meta__date');\n        const title = titleElement ? titleElement.innerText : 'No title';\n        const url = urlElement ? urlElement.href : 'No URL';\n        const blogUrl = blogUrlElement ? blogUrlElement.href : 'No blog URL';\n        const authorRegex = /@([^\\/]+)\\?/;\n        const authorMatch = url.match(authorRegex);\n        const author = authorMatch ? authorMatch[1] : 'Unknown author';\n        const date = dateElement ? dateElement.innerText : 'Unknown date';\n        return {\n          title,\n          url,\n          blogUrl,\n          author,\n          date\n        };\n      });\n    });\n    console.log(\"results\", results);\n    return results;\n  } catch (error) {\n    console.error('Error during Puppeteer scraping:', error);\n    throw new Error('Failed to scrape Medium');\n  } finally {\n    if (browser) {\n      await browser.close();\n    }\n  }\n}\napp.get('/search', async (req, res) => {\n  const query = req.query.q;\n  if (!query) {\n    return res.status(400).json({\n      error: 'Query parameter \"q\" is required'\n    });\n  }\n  try {\n    const results = await searchMedium(query);\n    if (results.length > 0) {\n      res.json(results);\n    } else {\n      res.status(404).json({\n        error: 'No results found'\n      });\n    }\n  } catch (error) {\n    console.error('Error handling /search request:', error);\n    res.status(500).json({\n      error: error.message\n    });\n  }\n});\napp.listen(PORT, () => {\n  console.log(`Server is running on http://localhost:${PORT}`);\n});","map":{"version":3,"names":["express","require","puppeteer","cors","app","PORT","process","env","use","searchMedium","query","browser","launch","headless","page","newPage","setDefaultTimeout","goto","encodeURIComponent","waitUntil","console","log","waitForSelector","timeout","results","evaluate","articles","Array","from","document","querySelectorAll","slice","map","article","titleElement","querySelector","urlElement","blogUrlElement","dateElement","title","innerText","url","href","blogUrl","authorRegex","authorMatch","match","author","date","error","Error","close","get","req","res","q","status","json","length","message","listen"],"sources":["C:/Users/ROHIT/OneDrive/Desktop/medium-search/frontend/src/App.js"],"sourcesContent":["const express = require('express');\nconst puppeteer = require('puppeteer');\nconst cors = require('cors');\n\nconst app = express();\nconst PORT = process.env.PORT || 3000;\n\napp.use(cors()); // Enable CORS for all routes\n\nasync function searchMedium(query) {\n    let browser;\n    try {\n        browser = await puppeteer.launch({ headless: true });\n        const page = await browser.newPage();\n        await page.setDefaultTimeout(90000); // Increase timeout to 90 seconds\n        await page.goto(`https://medium.com/search?q=${encodeURIComponent(query)}`, { waitUntil: 'networkidle2' });\n\n        console.log('Page content loaded');\n\n        await page.waitForSelector('article', { timeout: 90000 });\n\n        const results = await page.evaluate(() => {\n            const articles = Array.from(document.querySelectorAll('article'));\n            return articles.slice(0, 5).map(article => {\n                const titleElement = article.querySelector('h2');\n                const urlElement = article.querySelector('a');\n                const blogUrlElement = article.querySelector('a[href*=\"medium.com\"]');\n                const dateElement = article.querySelector('span.meta__date');\n\n                const title = titleElement ? titleElement.innerText : 'No title';\n                const url = urlElement ? urlElement.href : 'No URL';\n                const blogUrl = blogUrlElement ? blogUrlElement.href : 'No blog URL';\n\n                const authorRegex = /@([^\\/]+)\\?/;\n                const authorMatch = url.match(authorRegex);\n                const author = authorMatch ? authorMatch[1] : 'Unknown author';\n\n                const date = dateElement ? dateElement.innerText : 'Unknown date';\n\n                return { title, url, blogUrl, author, date };\n            });\n        });\n\n        console.log(\"results\", results);\n        return results;\n    } catch (error) {\n        console.error('Error during Puppeteer scraping:', error);\n        throw new Error('Failed to scrape Medium');\n    } finally {\n        if (browser) {\n            await browser.close();\n        }\n    }\n}\n\napp.get('/search', async (req, res) => {\n    const query = req.query.q;\n    if (!query) {\n        return res.status(400).json({ error: 'Query parameter \"q\" is required' });\n    }\n\n    try {\n        const results = await searchMedium(query);\n\n        if (results.length > 0) {\n            res.json(results);\n        } else {\n            res.status(404).json({ error: 'No results found' });\n        }\n    } catch (error) {\n        console.error('Error handling /search request:', error);\n        res.status(500).json({ error: error.message });\n    }\n});\n\napp.listen(PORT, () => {\n    console.log(`Server is running on http://localhost:${PORT}`);\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}